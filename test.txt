
#include<iostream>
#include<cstring>
using namespace std;
class Student{
private:
  string name;
  string gender;
  int age;
public:
  int getage(){
return this.age;
}
}
class Cd {
private:
    char performers[50];
    char label[20];
    int selections;
    double playtime;
public:
    Cd(const char* s1, const char* s2, int n, double x);
    Cd(const Cd& d);
    Cd();
    ~Cd() {};
    virtual void Report() const;
    Cd& operator=(const Cd& d);
};
Cd::Cd(const char* s1, const char* s2, int n, double x) {
    int p = 0;
    while (s1[p] != '\0') {
        performers[p] = s1[p];
        p++;
    }
    performers[p] = '\0'; // <- 加
    int l = 0;
    while (s2[l] != '\0') {
        label[l] = s2[l];
        l++;
    }
    label[l] = '\0'; // <- 加
    selections = n;
    playtime = x;
}
Cd::Cd(const Cd& d) {
    int p = 0;
    while (d.performers[p] != '\0') {
        performers[p] = d.performers[p];
        p++;
    }
    performers[p] = '\0';// 加
    int l = 0;
    while (d.label[l] != '\0') {
        label[l] = d.label[l];
        l++;
    }
    label[l] = '\0'; //加
    selections = d.selections;
    playtime = d.playtime;
}
Cd::Cd() {
    performers[50] = { 0 };
    label[20] = { 0 };
    selections = 0;
    playtime = 0;
}
void Cd::Report() const {
    int p = 0;
    cout << "Performers:";
    while (performers[p] != '\0') {
        cout << performers[p];
        p++;
    }
    int l = 0;
    cout << endl << "Label:";
    while (label[l] != '\0') {
        cout << label[l];
        l++;
    }
    cout << endl << "Selections:" << selections << endl;
    cout << "playtime:" << playtime << endl;
}

Cd& Cd::operator=(const Cd& d) {//需要非静态函数？----你类中的加个定义域，不然就全局--静态了
    int p = 0;
    while (d.performers[p] != '\0') {
        performers[p] = d.performers[p];
        p++;
    }
    performers[p] = '\0'; //加
    int l = 0;
    while (d.label[l] != '\0') {
        label[l] = d.label[l];
        l++;
    }
    label[l] = '\0'; //加
    selections = d.selections;
    playtime = d.playtime;
    return *this;

}



//

    Classic() {}
    virtual void Report() const override { // 改虚函数
        int p = 0;
        cout << "Performers:";
        while (performersC[p] != '\0') {
            cout << performersC[p];
            p++;
        }
        int l = 0;
        cout << endl << "Label:";
        while (labelC[l] != '\0') {
            cout << labelC[l];
            l++;
        }

        cout << endl << "Selections:" << selectionsC << endl;
        cout << "Playtime:" << playtimeC << endl;
        int w = 0;
        cout << "Work:";
        while (workC[w] != '\0') {
            cout << workC[w];
            w++;
        }
        cout << endl;
    }
    Classic& operator=(const Classic& d) {
        int p = 0;
        while (d.performersC[p] != '\0') {
            performersC[p] = d.performersC[p];
            p++;
        }
        performersC[p] = '\0'; //加
        int l = 0;
        while (d.labelC[l] != '\0') {
            labelC[l] = d.labelC[l];
            l++;
        }
        labelC[l] = '\0'; //加
        int w = 0;
        while (d.workC[w] != '\0') {
            workC[w] = d.workC[w];
            w++;
        }
        workC[w] = '\0'; //加
        selectionsC = d.selectionsC;
        playtimeC = d.playtimeC;
        return *this;

    }
};
void Bravo(Cd a) {
    a.Report();
}
void Bravo(Classic a) {
    a.Report();
}
int main()
{
    Cd c1("Beatles", "Capitol", 14, 35.5);
    Classic c2 = Classic("Piano Sonata in B flat, Fantasia in C", "Alfred Brendel", "Philips", 2, 57.17);

    Cd* pcd = &c1;
    cout << "Using object directly:\n";
    c1.Report();
    c2.Report();
    cout << "Using type cd *pointer to object:\n";
    pcd->Report();
    pcd = &c2;
    pcd->Report();
    cout << "Calling a function with a Cd reference argument:\n";
    Bravo(c1);
    Bravo(c2);
    cout << "Testing assignment: \n";
    Classic Copy;
    Copy = c2;
    Copy.Report();

    return 0;
}
